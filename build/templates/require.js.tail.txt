

/*******************************************************************************
	BBC SUSHI: bottom
 ******************************************************************************/

/**
 * @name CSSP Plugin
 * @license copyright (c) 2010 BBC
 */

(function () {
	var magicNumber = 12345, // zindex must be set to this to signal CSS has been applied
		intervalId;
	
	function getZindex(elId) {
		var el = document.getElementById(elId),
			zindex;
		
		if (el) {
			// the w3c way, uses hyphenated property names
			if (window.getComputedStyle) {
				zindex = document.defaultView.getComputedStyle(el, null).getPropertyValue('z-index');
			}
			// the IE way
			else if (el.currentStyle) {
				zindex = el.currentStyle['zIndex'];
			}
		}
		return zindex;
	}
	
	require._cssp = []; // like [ [id, callback], [id, callback], ... ]
	
	function watch() {
		var cssp;
		for (var i = 0; i < require._cssp.length; i++) { // length may change during loop
			cssp = require._cssp[i];
			if ( getZindex(cssp[0]) == magicNumber ) {
				cssp[1](); // fire callback
				require._cssp.splice(i, 1);
				i--;
				if (require._cssp.length === 0) { clearInterval(intervalId); }
			}
		}
	}
	
	require.plugin({
		prefix: 'cssp',

		/**
		 * This callback is prefix-specific, only gets called for this prefix
		 */
		require: function (name, deps, callback, context) {
			// no-op
		},

		/**
		 * Called when a new context is defined. Use this to store
		 * context-specific info on it.
		 */
		newContext: function (context) {
			require.mixin(context, {
				csspWaiting: []
			});
		},

		/**
		 * Called when a dependency needs to be loaded.
		 * @param {string} name Like some/url?elementId
		 */
		load: function (name, contextName) {
			var index = name.indexOf('?'),
				url = name.substring(0, index),
				id = name.substring(index + 1, name.length),
				context = require.s.contexts[contextName],
				data = {
					name: name
				},
				head = require.s.head,
				node = head.ownerDocument.createElement('link');
			
			// create CSSP callback function
			require._cssp.push([id, function(){
				context.loaded[name] = true;
				require.checkLoaded(contextName);
			}]);
			
			if (require._cssp.length === 1) {
				intervalId = setInterval(watch, 333); // start watching
			}

			// hold on to the data for later dependency resolution in orderDeps
			context.csspWaiting.push(data);
			context.loaded[name] = false;
			node.type = 'text/css';
			node.rel = 'stylesheet';
			node.href = (context.config.baseUrl || '') + url;
			head.appendChild(node);
		},

		/**
		 * Called when the dependencies of a module are checked.
		 */
		checkDeps: function (name, deps, context) {
			// no-op
		},

		/**
		 * Called to determine if a module is waiting to load.
		 */
		isWaiting: function (context) {
			return !!context.csspWaiting.length;
		},

		/**
		 * Called when all modules have been loaded.
		 */
		orderDeps: function (context) {
			// clear up state since further processing could
			// add more things to fetch.
			var i, dep, waitAry = context.csspWaiting;
			context.csspWaiting = [];
			for (i = 0; (dep = waitAry[i]); i++) {
				context.defined[dep.name] = dep.value;
			}
		}
	});
}());